// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	users "event_ticket/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCaseInterface is an autogenerated mock type for the UserUseCaseInterface type
type UserUseCaseInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserUseCaseInterface) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, username, password
func (_m *UserUseCaseInterface) Login(email string, username string, password string) (users.UserCore, string, error) {
	ret := _m.Called(email, username, password)

	var r0 users.UserCore
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string) (users.UserCore, string, error)); ok {
		return rf(email, username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) users.UserCore); ok {
		r0 = rf(email, username, password)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(email, username, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(email, username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadAllUser provides a mock function with given fields:
func (_m *UserUseCaseInterface) ReadAllUser() ([]users.UserCore, error) {
	ret := _m.Called()

	var r0 []users.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]users.UserCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []users.UserCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.UserCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSpecificUser provides a mock function with given fields: id
func (_m *UserUseCaseInterface) ReadSpecificUser(id string) (users.UserCore, error) {
	ret := _m.Called(id)

	var r0 users.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.UserCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) users.UserCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: data
func (_m *UserUseCaseInterface) Register(data users.UserCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(users.UserCore) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(users.UserCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(users.UserCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, data
func (_m *UserUseCaseInterface) UpdateUser(id string, data users.UserCore) (users.UserCore, error) {
	ret := _m.Called(id, data)

	var r0 users.UserCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, users.UserCore) (users.UserCore, error)); ok {
		return rf(id, data)
	}
	if rf, ok := ret.Get(0).(func(string, users.UserCore) users.UserCore); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	if rf, ok := ret.Get(1).(func(string, users.UserCore) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCaseInterface creates a new instance of UserUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCaseInterface {
	mock := &UserUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
