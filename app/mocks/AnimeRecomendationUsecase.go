// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	dto "event_ticket/features/chat-AI/dto"

	mock "github.com/stretchr/testify/mock"
)

// AnimeRecomendationUsecase is an autogenerated mock type for the AnimeRecomendationUsecase type
type AnimeRecomendationUsecase struct {
	mock.Mock
}

// AnimeRecomendation provides a mock function with given fields: request, key
func (_m *AnimeRecomendationUsecase) AnimeRecomendation(request dto.RequestData, key string) (string, error) {
	ret := _m.Called(request, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.RequestData, string) (string, error)); ok {
		return rf(request, key)
	}
	if rf, ok := ret.Get(0).(func(dto.RequestData, string) string); ok {
		r0 = rf(request, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.RequestData, string) error); ok {
		r1 = rf(request, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAnimeRecomendationUsecase creates a new instance of AnimeRecomendationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnimeRecomendationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnimeRecomendationUsecase {
	mock := &AnimeRecomendationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
