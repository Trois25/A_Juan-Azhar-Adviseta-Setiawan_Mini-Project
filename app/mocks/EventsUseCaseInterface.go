// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	events "event_ticket/features/events"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// EventsUseCaseInterface is an autogenerated mock type for the EventsUseCaseInterface type
type EventsUseCaseInterface struct {
	mock.Mock
}

// DeleteEvent provides a mock function with given fields: id
func (_m *EventsUseCaseInterface) DeleteEvent(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostEvent provides a mock function with given fields: data, image
func (_m *EventsUseCaseInterface) PostEvent(data events.EventsCore, image *multipart.FileHeader) (int, error) {
	ret := _m.Called(data, image)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(events.EventsCore, *multipart.FileHeader) (int, error)); ok {
		return rf(data, image)
	}
	if rf, ok := ret.Get(0).(func(events.EventsCore, *multipart.FileHeader) int); ok {
		r0 = rf(data, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(events.EventsCore, *multipart.FileHeader) error); ok {
		r1 = rf(data, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAllEvent provides a mock function with given fields:
func (_m *EventsUseCaseInterface) ReadAllEvent() ([]events.EventsCore, error) {
	ret := _m.Called()

	var r0 []events.EventsCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]events.EventsCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []events.EventsCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.EventsCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSpecificEvent provides a mock function with given fields: id
func (_m *EventsUseCaseInterface) ReadSpecificEvent(id string) (events.EventsCore, error) {
	ret := _m.Called(id)

	var r0 events.EventsCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (events.EventsCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) events.EventsCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(events.EventsCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: id, data, image
func (_m *EventsUseCaseInterface) UpdateEvent(id string, data events.EventsCore, image *multipart.FileHeader) (events.EventsCore, error) {
	ret := _m.Called(id, data, image)

	var r0 events.EventsCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, events.EventsCore, *multipart.FileHeader) (events.EventsCore, error)); ok {
		return rf(id, data, image)
	}
	if rf, ok := ret.Get(0).(func(string, events.EventsCore, *multipart.FileHeader) events.EventsCore); ok {
		r0 = rf(id, data, image)
	} else {
		r0 = ret.Get(0).(events.EventsCore)
	}

	if rf, ok := ret.Get(1).(func(string, events.EventsCore, *multipart.FileHeader) error); ok {
		r1 = rf(id, data, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventsUseCaseInterface creates a new instance of EventsUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsUseCaseInterface {
	mock := &EventsUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
