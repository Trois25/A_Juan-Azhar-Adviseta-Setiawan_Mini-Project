// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	purchase "event_ticket/features/purchase"
)

// PurchaseUseCaseInterface is an autogenerated mock type for the PurchaseUseCaseInterface type
type PurchaseUseCaseInterface struct {
	mock.Mock
}

// CreatePurchase provides a mock function with given fields: data
func (_m *PurchaseUseCaseInterface) CreatePurchase(data purchase.PurchaseCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(purchase.PurchaseCore) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(purchase.PurchaseCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(purchase.PurchaseCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePurchase provides a mock function with given fields: id
func (_m *PurchaseUseCaseInterface) DeletePurchase(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadAllPurchase provides a mock function with given fields:
func (_m *PurchaseUseCaseInterface) ReadAllPurchase() ([]purchase.PurchaseCore, error) {
	ret := _m.Called()

	var r0 []purchase.PurchaseCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]purchase.PurchaseCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []purchase.PurchaseCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]purchase.PurchaseCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSpecificPurchase provides a mock function with given fields: id
func (_m *PurchaseUseCaseInterface) ReadSpecificPurchase(id string) (purchase.PurchaseCore, error) {
	ret := _m.Called(id)

	var r0 purchase.PurchaseCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (purchase.PurchaseCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) purchase.PurchaseCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(purchase.PurchaseCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePurchase provides a mock function with given fields: id, data
func (_m *PurchaseUseCaseInterface) UpdatePurchase(id string, data purchase.PurchaseCore) (purchase.PurchaseCore, error) {
	ret := _m.Called(id, data)

	var r0 purchase.PurchaseCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, purchase.PurchaseCore) (purchase.PurchaseCore, error)); ok {
		return rf(id, data)
	}
	if rf, ok := ret.Get(0).(func(string, purchase.PurchaseCore) purchase.PurchaseCore); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Get(0).(purchase.PurchaseCore)
	}

	if rf, ok := ret.Get(1).(func(string, purchase.PurchaseCore) error); ok {
		r1 = rf(id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProof provides a mock function with given fields: id, data, image
func (_m *PurchaseUseCaseInterface) UploadProof(id string, data purchase.PurchaseCore, image *multipart.FileHeader) (purchase.PurchaseCore, error) {
	ret := _m.Called(id, data, image)

	var r0 purchase.PurchaseCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, purchase.PurchaseCore, *multipart.FileHeader) (purchase.PurchaseCore, error)); ok {
		return rf(id, data, image)
	}
	if rf, ok := ret.Get(0).(func(string, purchase.PurchaseCore, *multipart.FileHeader) purchase.PurchaseCore); ok {
		r0 = rf(id, data, image)
	} else {
		r0 = ret.Get(0).(purchase.PurchaseCore)
	}

	if rf, ok := ret.Get(1).(func(string, purchase.PurchaseCore, *multipart.FileHeader) error); ok {
		r1 = rf(id, data, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPurchaseUseCaseInterface creates a new instance of PurchaseUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchaseUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchaseUseCaseInterface {
	mock := &PurchaseUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
